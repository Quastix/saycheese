#Dit is het configuratiebestand van de applicatie
# De JDBC URL die verwijst naar de database die je applicatie gebruikt.
spring.datasource.url=jdbc:mysql://localhost/saycheese
# De database gebruiker waarmee je applicatie de database opent.
spring.datasource.username=cursist
# Het paswoord van de gebruiker bij
spring.datasource.password=cursist
# Spring maakt in een test een DataSource die verwijst naar een database van het merk H2,
# niet naar de MySQL database gedefinieerd in application.properties.
# H2 houdt de data bij in het RAM-geheugen, niet op de harde schijf.
# H2 reageert bij het uitvoeren van een SQL-statement soms anders dan MySQL.
# Je vraagt daarom de MySQL database niet te vervangen door een H2 database.
spring.test.database.replace=none
# Je definieert het standaard isolation level dat Spring gebruikt bij je transacties.
# Als je voor een use-case een ander isolation level nodig hebt, definieer je dat in
# die use-case.
spring.datasource.hikari.transaction-isolation=TRANSACTION_READ_COMMITTED
# JPA koppelt standaard aan de private variabele emailAdres de database kolom email_adres.
# JPA vervangt hoofdletters door kleine letters met voorafgaande _.
# Met onderstaande code kopplet JPA nu aan de private variabele emailAdres de database kolom emailAdres.
# Je splitst de lange regel met \. IntelliJ kan de gesplitste regel rood kleuren. Je mag dit negeren.
spring.jpa.hibernate.naming.physical-strategy=\
org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# JPA logt elk statement standaard op één regel. Dit leest moeilijk bij lange statements.
# Met deze instelling logt JPA elk statement over meerdere regels.
spring.jpa.properties.hibernate.format_sql=true
# Hiermee krijgen de keywords in de SQL statements een blauwe kleur.
spring.jpa.properties.hibernate.highlight_sql=true
# JPA logt nu ook de waarden die JPA invult in de ? tekens (parameters) in de statements.
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Voeg een regel toe aan application.properties om de SQL statements niet enkel te loggen tijdens je tests,
# maar ook als je het programma uitvoert:
logging.level.org.hibernate.SQL=DEBUG
# Je leerde in de cursus JDBC dat je bij locken een deadlock kan veroorzaken.
# De oplossing was: records locken in oplopende volgorde van de primary key.
# Hibernate doet dit als je volgende regel toevoegt aan application.properties:
spring.jpa.properties.hibernate.order_updates=true

